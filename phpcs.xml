<?xml version="1.0"?>
<ruleset name="WordPress Theme Coding Standards">
  <!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
  <!-- See https://github.com/WordPress/WordPress-Coding-Standards -->
  <!-- See https://github.com/PHPCompatibility/PHPCompatibilityWP -->
  <!-- Pass some flags to PHPCS:
     p flag: Show progress of the run.
     s flag: Show sniff codes in all reports.Åš
     v flag: Print verbose output.
     n flag: Do not print warnings.
  -->
  <arg value="ps"/>
  <arg name="basepath" value="./"/>
  <arg name="parallel" value="20"/>
  <arg name="extensions" value="php"/>
  <arg name="cache"/>

  <file>.</file>

  <!-- Exclude patterns. -->
  <exclude-pattern>/vendor/</exclude-pattern>
  <exclude-pattern>/node_modules/</exclude-pattern>
  <exclude-pattern>/languages/</exclude-pattern>
  <exclude-pattern>/dist/</exclude-pattern>
  <exclude-pattern>/build/</exclude-pattern>

  <rule ref="WordPress-Core">
    <exclude name="Generic.Files.LineEndings.InvalidEOLChar"/>
    <!--		<exclude name="WordPress.WP.EnqueuedResourceParameters.NoExplicitVersion"/>-->
    <!--		<exclude name="WordPress.WP.EnqueuedResourceParameters.MissingVersion"/>-->
    <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>
    <exclude name="PHPCompatibility.Syntax.NewShortArray.Found"/>
    <exclude name="WordPress.PHP.DisallowShortTernary" />
  </rule>

  <!-- Include the WordPress-Extra standard. -->
  <rule ref="WordPress-Extra">
    <!--
    We may want a middle ground though. The best way to do this is add the
    entire ruleset, then rule by rule, remove ones that don't suit a project.
    We can do this by running `phpcs` with the '-s' flag, which allows us to
    see the names of the sniffs reporting errors.
    Once we know the sniff names, we can opt to exclude sniffs which don't
    suit our project like so.
    -->
    <exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
    <exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>
  </rule>

  <!-- Let's also check that everything is properly documented. -->
  <rule ref="WordPress-Docs"/>

  <!-- Add in some extra rules from other standards. -->
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>

  <rule ref="Generic.Commenting.Todo.Found">
    <exclude-pattern>./</exclude-pattern>
  </rule>

  <!-- Check for PHP cross-version compatibility. -->
  <config name="testVersion" value="5.6-"/>
  <rule ref="PHPCompatibilityWP"/>

  <!--
  To get the optimal benefits of using WPCS, we should add a couple of
  custom properties.
  Adjust the values of these properties to fit our needs.

  For information on additional custom properties available, check out
  the wiki:
  https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
  -->
  <config name="minimum_supported_wp_version" value="5.0.0"/>

  <rule ref="WordPress.WP.I18n">
    <properties>
      <property name="text_domain" value="gp-block-spacing"/>
      <property name="text_domain" value="default"/>
    </properties>
  </rule>

  <rule ref="WordPress.NamingConventions.ValidVariableName">
    <properties>
      <property name="customPropertiesWhitelist" type="array">
        <!-- DOMDocument::$documentElement -->
        <element value="documentElement" />
        <!-- DOMElement::$parentNode -->
        <element value="parentNode" />
      </property>
    </properties>
  </rule>

  <rule ref="WordPress.Security.EscapeOutput">
    <properties>
      <property name="customAutoEscapedFunctions" type="array">
        <!-- i18n functions are considered safe for core translations. -->
        <element value="__"/>
        <element value="_x"/>
        <element value="_n"/>
        <element value="_nx"/>
        <element value="number_format_i18n"/>
        <element value="date_i18n"/>
      </property>
    </properties>
  </rule>

  <rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
    <properties>
      <property name="blank_line_check" value="true"/>
    </properties>
  </rule>
</ruleset>
